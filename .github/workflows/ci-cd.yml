name: Consciousness Engine CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: consciousness-engine

jobs:
  # Tests et validation du code
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [1.75.0, stable]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: consciousness_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        profile: minimal
        override: true
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust-version }}-
          ${{ runner.os }}-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev libpq-dev cmake build-essential

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy lints
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/consciousness_test
        REDIS_URL: redis://localhost:6379
        RUST_LOG: debug
      run: cargo test --workspace --verbose

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/consciousness_test
        REDIS_URL: redis://localhost:6379
        RUST_LOG: debug
      run: cargo test --workspace --test integration_tests -- --test-threads=1

    - name: Run stress tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/consciousness_test
        REDIS_URL: redis://localhost:6379
        RUST_LOG: info
      run: cargo test --workspace --test stress_tests -- --test-threads=1

    - name: Generate test coverage
      uses: actions-rs/tarpaulin@v0.1
      with:
        version: '0.22.0'
        args: '--workspace --out Xml --timeout 300'

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./cobertura.xml
        flags: unittests
        name: codecov-umbrella

  # Analyse de sécurité
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Security audit
      uses: actions-rs/audit@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Run cargo-deny
      uses: EmbarkStudios/cargo-deny-action@v1
      with:
        log-level: warn
        command: check
        arguments: --all-features

  # Build et push des images Docker
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Consciousness Engine
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: consciousness-engine
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push Agent Orchestrator
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: agent-orchestrator
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository }}/agent-orchestrator:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push AI Governance
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: ai-governance
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository }}/ai-governance:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Déploiement automatique
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    environment:
      name: production
      url: https://consciousness.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}

    - name: Deploy to Kubernetes
      uses: azure/k8s-deploy@v1
      with:
        namespace: consciousness-system
        manifests: |
          k8s/namespace.yaml
          k8s/configmap.yaml
          k8s/secrets.yaml
          k8s/postgres.yaml
          k8s/consciousness-engine.yaml
          k8s/agent-orchestrator.yaml
          k8s/ai-governance.yaml
          k8s/ingress.yaml
        images: |
          ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ github.repository }}/agent-orchestrator:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ github.repository }}/ai-governance:${{ github.sha }}

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/consciousness-engine -n consciousness-system --timeout=600s
        kubectl rollout status deployment/agent-orchestrator -n consciousness-system --timeout=600s
        kubectl rollout status deployment/ai-governance -n consciousness-system --timeout=600s

    - name: Run smoke tests
      run: |
        kubectl run smoke-test --rm -i --restart=Never --image=curlimages/curl -- \
          curl -f http://consciousness-engine.consciousness-system.svc.cluster.local:8080/health

  # Tests de performance post-déploiement
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run load tests
      uses: grafana/k6-action@v0.3.1
      with:
        filename: tests/performance/load-test.js
      env:
        K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: results/

  # Notification des résultats
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, security, build, deploy, performance]
    if: always()

    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#consciousness-ci'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}