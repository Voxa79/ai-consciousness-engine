apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: consciousness-system
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: consciousness-system
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: consciousness
        - name: POSTGRES_USER
          value: consciousness
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: consciousness-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - consciousness
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - consciousness
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-init
        configMap:
          name: postgres-init-scripts
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: consciousness-system
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app.kubernetes.io/name: postgres
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: consciousness-system
data:
  01-init-consciousness.sql: |
    -- Consciousness Engine Database Schema
    
    -- Extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    
    -- Consciousness States Table
    CREATE TABLE consciousness_states (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        agent_id VARCHAR(255) NOT NULL,
        awareness_level DECIMAL(3,2) NOT NULL CHECK (awareness_level >= 0 AND awareness_level <= 1),
        emotional_state JSONB NOT NULL,
        cognitive_load DECIMAL(3,2) NOT NULL,
        confidence_score DECIMAL(3,2) NOT NULL,
        meta_cognitive_depth INTEGER NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- Episodic Memory Table
    CREATE TABLE episodic_memories (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        agent_id VARCHAR(255) NOT NULL,
        experience_type VARCHAR(100) NOT NULL,
        content TEXT NOT NULL,
        emotional_context JSONB,
        importance_score DECIMAL(3,2) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        accessed_count INTEGER DEFAULT 0,
        last_accessed TIMESTAMP WITH TIME ZONE
    );
    
    -- Semantic Memory Table
    CREATE TABLE semantic_memories (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        agent_id VARCHAR(255) NOT NULL,
        knowledge_type VARCHAR(100) NOT NULL,
        content TEXT NOT NULL,
        confidence_level DECIMAL(3,2) NOT NULL,
        source VARCHAR(255),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- Ethical Decisions Table
    CREATE TABLE ethical_decisions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        agent_id VARCHAR(255) NOT NULL,
        decision_context JSONB NOT NULL,
        ethical_frameworks_used TEXT[] NOT NULL,
        ethical_score DECIMAL(3,2) NOT NULL,
        reasoning_chain JSONB NOT NULL,
        approved BOOLEAN NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- Agent Interactions Table
    CREATE TABLE agent_interactions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        source_agent_id VARCHAR(255) NOT NULL,
        target_agent_id VARCHAR(255),
        interaction_type VARCHAR(100) NOT NULL,
        content TEXT NOT NULL,
        response TEXT,
        success BOOLEAN NOT NULL,
        processing_time_ms INTEGER NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- Performance Metrics Table
    CREATE TABLE performance_metrics (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        agent_id VARCHAR(255) NOT NULL,
        metric_type VARCHAR(100) NOT NULL,
        metric_value DECIMAL(10,4) NOT NULL,
        unit VARCHAR(50) NOT NULL,
        timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- Indexes for performance
    CREATE INDEX idx_consciousness_states_agent_id ON consciousness_states(agent_id);
    CREATE INDEX idx_consciousness_states_created_at ON consciousness_states(created_at);
    CREATE INDEX idx_episodic_memories_agent_id ON episodic_memories(agent_id);
    CREATE INDEX idx_episodic_memories_importance ON episodic_memories(importance_score DESC);
    CREATE INDEX idx_semantic_memories_agent_id ON semantic_memories(agent_id);
    CREATE INDEX idx_semantic_memories_content_gin ON semantic_memories USING gin(to_tsvector('english', content));
    CREATE INDEX idx_ethical_decisions_agent_id ON ethical_decisions(agent_id);
    CREATE INDEX idx_ethical_decisions_score ON ethical_decisions(ethical_score);
    CREATE INDEX idx_agent_interactions_source ON agent_interactions(source_agent_id);
    CREATE INDEX idx_agent_interactions_target ON agent_interactions(target_agent_id);
    CREATE INDEX idx_performance_metrics_agent_type ON performance_metrics(agent_id, metric_type);
    CREATE INDEX idx_performance_metrics_timestamp ON performance_metrics(timestamp);
    
    -- Triggers for updated_at
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
    END;
    $$ language 'plpgsql';
    
    CREATE TRIGGER update_consciousness_states_updated_at BEFORE UPDATE ON consciousness_states FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    CREATE TRIGGER update_semantic_memories_updated_at BEFORE UPDATE ON semantic_memories FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();