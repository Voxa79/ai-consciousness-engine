apiVersion: v1
kind: ConfigMap
metadata:
  name: consciousness-config
  namespace: consciousness-system
  labels:
    app.kubernetes.io/name: consciousness-engine
    app.kubernetes.io/component: config
data:
  consciousness.toml: |
    [server]
    host = "0.0.0.0"
    port = 8080
    workers = 4
    
    [consciousness]
    quality_threshold = 0.85
    max_processing_time_ms = 100
    memory_cleanup_interval_sec = 300
    quantum_enabled = true
    neuromorphic_enabled = true
    ethical_strictness = 0.95
    
    [database]
    max_connections = 100
    connection_timeout_sec = 30
    idle_timeout_sec = 600
    
    [redis]
    max_connections = 50
    connection_timeout_sec = 5
    
    [monitoring]
    metrics_enabled = true
    metrics_port = 9090
    tracing_enabled = true
    log_level = "info"
    
    [security]
    cors_enabled = true
    rate_limit_requests_per_minute = 1000
    jwt_secret_key = "${JWT_SECRET_KEY}"
    
  orchestrator.toml: |
    [server]
    host = "0.0.0.0"
    port = 8081
    
    [orchestration]
    max_concurrent_agents = 1000
    task_timeout_sec = 300
    consensus_timeout_sec = 60
    
    [communication]
    message_queue_size = 10000
    broadcast_timeout_sec = 30
    
  governance.toml: |
    [server]
    host = "0.0.0.0"
    port = 8082
    
    [ethics]
    evaluation_timeout_sec = 10
    min_ethical_score = 0.80
    audit_interval_hours = 24
    
    [compliance]
    strict_mode = true
    auto_enforcement = true
    violation_threshold = 3
    
  nginx.conf: |
    upstream consciousness_backend {
        least_conn;
        server consciousness-engine:8080 max_fails=3 fail_timeout=30s;
    }
    
    upstream orchestrator_backend {
        least_conn;
        server agent-orchestrator:8081 max_fails=3 fail_timeout=30s;
    }
    
    upstream governance_backend {
        least_conn;
        server ai-governance:8082 max_fails=3 fail_timeout=30s;
    }
    
    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
        limit_req zone=api burst=20 nodelay;
        
        # Consciousness Engine API
        location /api/consciousness/ {
            proxy_pass http://consciousness_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_timeout 120s;
        }
        
        # Agent Orchestrator API
        location /api/orchestrator/ {
            proxy_pass http://orchestrator_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_timeout 300s;
        }
        
        # AI Governance API
        location /api/governance/ {
            proxy_pass http://governance_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_timeout 60s;
        }
        
        # Health checks
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Metrics endpoint (protected)
        location /metrics {
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            proxy_pass http://consciousness_backend/metrics;
        }
    }