# Docker Compose for Consciousness Platform Development
# Complete stack with consciousness engine, API gateway, web UI, and supporting services

version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: consciousness-postgres
    environment:
      POSTGRES_DB: consciousness
      POSTGRES_USER: consciousness
      POSTGRES_PASSWORD: consciousness_dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U consciousness"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - consciousness-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: consciousness-redis
    command: redis-server --appendonly yes --requirepass consciousness_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - consciousness-network

  # Consciousness Engine
  consciousness-engine:
    build:
      context: .
      dockerfile: consciousness-engine/Dockerfile
      target: builder
    container_name: consciousness-engine
    environment:
      - RUST_LOG=debug
      - CONSCIOUSNESS_CONFIG_PATH=/app/config
      - CONSCIOUSNESS_DATA_PATH=/app/data
      - DATABASE_URL=postgresql://consciousness:consciousness_dev_password@postgres:5432/consciousness
      - REDIS_URL=redis://:consciousness_redis_password@redis:6379
    volumes:
      - ./config:/app/config:ro
      - consciousness_data:/app/data
      - consciousness_logs:/app/logs
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/app/bin/consciousness_demo", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - consciousness-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: consciousness-api-gateway
    environment:
      - RUST_LOG=debug
      - PORT=8080
      - CONSCIOUSNESS_ENGINE_URL=http://consciousness-engine:8081
      - DATABASE_URL=postgresql://consciousness:consciousness_dev_password@postgres:5432/consciousness
      - REDIS_URL=redis://:consciousness_redis_password@redis:6379
      - JWT_SECRET=consciousness_jwt_secret_dev_only
    volumes:
      - ./config:/app/config:ro
      - consciousness_logs:/app/logs
    ports:
      - "8080:8080"
    depends_on:
      consciousness-engine:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - consciousness-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Web UI (React)
  web-ui:
    build:
      context: web-ui
      dockerfile: Dockerfile
      target: development
    container_name: consciousness-web-ui
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_WS_URL=ws://localhost:8080
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./web-ui/src:/app/src
      - ./web-ui/public:/app/public
      - web_ui_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - consciousness-network
    stdin_open: true
    tty: true

  # Nginx reverse proxy (production-like setup)
  nginx:
    image: nginx:alpine
    container_name: consciousness-nginx
    volumes:
      - ./docker/nginx-dev.conf:/etc/nginx/nginx.conf:ro
      - consciousness_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web-ui
      - api-gateway
    networks:
      - consciousness-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: consciousness-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - consciousness-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: consciousness-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=consciousness_grafana_admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - consciousness-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: consciousness-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - consciousness-network

  # ElasticSearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: consciousness-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - consciousness-network

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: consciousness-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - consciousness-network

  # Benchmark runner (for performance testing)
  benchmark:
    build:
      context: .
      dockerfile: consciousness-engine/Dockerfile
      target: builder
    container_name: consciousness-benchmark
    command: /app/benchmarks/consciousness_benchmarks
    environment:
      - RUST_LOG=info
      - CONSCIOUSNESS_ENGINE_URL=http://consciousness-engine:8081
    volumes:
      - ./benchmark_results:/app/benchmark_results
    depends_on:
      consciousness-engine:
        condition: service_healthy
    networks:
      - consciousness-network
    profiles:
      - benchmark

volumes:
  postgres_data:
  redis_data:
  consciousness_data:
  consciousness_logs:
  web_ui_node_modules:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  consciousness-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16