# Script de d√©marrage rapide avec syst√®me de red√©marrage int√©gr√©
# Auteur: Consciousness Engine Team
# Version: 1.0

param(
    [switch]$SkipTests,
    [switch]$Verbose,
    [string]$Mode = "dev", # dev, static, full
    [int]$Port = 3001
)

Write-Host "üöÄ D√©marrage Rapide - Consciousness Engine avec Red√©marrage" -ForegroundColor Cyan
Write-Host "==========================================================" -ForegroundColor Cyan

# Configuration
$webUiPath = Join-Path $PSScriptRoot "web-ui"
$startTime = Get-Date

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "HH:mm:ss"
    $color = switch ($Level) {
        "ERROR" { "Red" }
        "WARN" { "Yellow" }
        "SUCCESS" { "Green" }
        "STEP" { "Cyan" }
        default { "White" }
    }
    Write-Host "[$timestamp] [$Level] $Message" -ForegroundColor $color
}

# √âtape 1: V√©rifications pr√©liminaires
Write-Log "√âtape 1: V√©rifications pr√©liminaires" "STEP"

# V√©rifier Node.js
try {
    $nodeVersion = node --version
    Write-Log "‚úÖ Node.js d√©tect√©: $nodeVersion" "SUCCESS"
} catch {
    Write-Log "‚ùå Node.js non install√©" "ERROR"
    exit 1
}

# V√©rifier PowerShell
$psVersion = $PSVersionTable.PSVersion
if ($psVersion.Major -lt 5) {
    Write-Log "‚ö†Ô∏è PowerShell version ancienne: $psVersion" "WARN"
} else {
    Write-Log "‚úÖ PowerShell version: $psVersion" "SUCCESS"
}

# V√©rifier les dossiers
if (-not (Test-Path $webUiPath)) {
    Write-Log "‚ùå Dossier web-ui non trouv√©: $webUiPath" "ERROR"
    exit 1
}

# √âtape 2: Test du syst√®me de red√©marrage (optionnel)
if (-not $SkipTests) {
    Write-Log "√âtape 2: Test du syst√®me de red√©marrage" "STEP"
    
    try {
        $testResult = & "$PSScriptRoot\test-restart-system.ps1" -Verbose:$Verbose
        if ($LASTEXITCODE -eq 0) {
            Write-Log "‚úÖ Syst√®me de red√©marrage op√©rationnel" "SUCCESS"
        } else {
            Write-Log "‚ö†Ô∏è Probl√®mes d√©tect√©s dans le syst√®me de red√©marrage" "WARN"
            Write-Host "Continuer malgr√© les probl√®mes? (y/N): " -NoNewline -ForegroundColor Yellow
            $response = Read-Host
            if ($response -ne "y" -and $response -ne "Y") {
                Write-Log "D√©marrage annul√© par l'utilisateur" "WARN"
                exit 1
            }
        }
    } catch {
        Write-Log "‚ö†Ô∏è Impossible de tester le syst√®me de red√©marrage" "WARN"
    }
} else {
    Write-Log "√âtape 2: Tests ignor√©s (--SkipTests)" "WARN"
}

# √âtape 3: Pr√©paration de l'environnement
Write-Log "√âtape 3: Pr√©paration de l'environnement" "STEP"

Set-Location $webUiPath

# V√©rifier/installer les d√©pendances
if (-not (Test-Path "node_modules")) {
    Write-Log "üì¶ Installation des d√©pendances..." "INFO"
    npm install --silent
    if ($LASTEXITCODE -ne 0) {
        Write-Log "‚ùå √âchec de l'installation des d√©pendances" "ERROR"
        exit 1
    }
    Write-Log "‚úÖ D√©pendances install√©es" "SUCCESS"
} else {
    Write-Log "‚úÖ D√©pendances d√©j√† install√©es" "SUCCESS"
}

# Configuration des variables d'environnement pour stabilit√©
$env:FAST_REFRESH = "false"
$env:WDS_HOT = "false"
$env:WDS_LIVE_RELOAD = "false"
$env:CHOKIDAR_USEPOLLING = "true"
$env:WATCHPACK_POLLING = "true"
$env:BROWSER = "none"
$env:GENERATE_SOURCEMAP = "false"
$env:ESLINT_NO_DEV_ERRORS = "true"
$env:TSC_COMPILE_ON_ERROR = "true"
$env:PORT = $Port

Write-Log "‚úÖ Variables d'environnement configur√©es" "SUCCESS"

# √âtape 4: D√©marrage selon le mode
Write-Log "√âtape 4: D√©marrage en mode $Mode" "STEP"

switch ($Mode.ToLower()) {
    "dev" {
        Write-Log "üîß Mode d√©veloppement avec red√©marrage automatique" "INFO"
        Write-Log "   Local:   http://127.0.0.1:$Port" "INFO"
        Write-Log "   Acc√®s:   http://127.0.0.1:$Port/#/login" "INFO"
        Write-Log "" "INFO"
        Write-Log "üîÑ Fonctionnalit√©s de red√©marrage disponibles:" "INFO"
        Write-Log "   - Bouton de red√©marrage en bas √† droite" "INFO"
        Write-Log "   - R√©cup√©ration automatique d'erreurs" "INFO"
        Write-Log "   - Monitoring de sant√© en temps r√©el" "INFO"
        Write-Log "   - Sauvegarde automatique d'√©tat" "INFO"
        Write-Log "" "INFO"
        Write-Log "‚ö†Ô∏è  Hot Reload D√âSACTIV√â pour √©viter les boucles" "WARN"
        Write-Log "   Rechargez manuellement apr√®s vos modifications" "WARN"
        Write-Log "" "INFO"
        Write-Log "Appuyez sur Ctrl+C pour arr√™ter" "INFO"
        
        # D√©marrer React avec monitoring
        npm start
    }
    
    "static" {
        Write-Log "üèóÔ∏è Construction de l'application..." "INFO"
        npm run build
        if ($LASTEXITCODE -ne 0) {
            Write-Log "‚ùå √âchec de la construction" "ERROR"
            exit 1
        }
        
        Write-Log "üöÄ D√©marrage du serveur statique sur le port $Port..." "INFO"
        Write-Log "   Local:   http://127.0.0.1:$Port" "INFO"
        Write-Log "   Acc√®s:   http://127.0.0.1:$Port/#/login" "INFO"
        Write-Log "" "INFO"
        Write-Log "Appuyez sur Ctrl+C pour arr√™ter" "INFO"
        
        # Serveur HTTP simple
        $listener = New-Object System.Net.HttpListener
        $listener.Prefixes.Add("http://127.0.0.1:$Port/")
        $listener.Start()
        
        try {
            while ($listener.IsListening) {
                $context = $listener.GetContext()
                $request = $context.Request
                $response = $context.Response
                
                $path = $request.Url.AbsolutePath
                if ($path -eq "/") { $path = "/index.html" }
                
                $filePath = Join-Path "build" $path.TrimStart('/')
                
                if (Test-Path $filePath) {
                    $content = [System.IO.File]::ReadAllBytes($filePath)
                    $response.ContentLength64 = $content.Length
                    $response.OutputStream.Write($content, 0, $content.Length)
                } else {
                    # SPA fallback
                    $indexPath = Join-Path "build" "index.html"
                    if (Test-Path $indexPath) {
                        $content = [System.IO.File]::ReadAllBytes($indexPath)
                        $response.ContentLength64 = $content.Length
                        $response.OutputStream.Write($content, 0, $content.Length)
                    } else {
                        $response.StatusCode = 404
                    }
                }
                
                $response.Close()
            }
        } finally {
            $listener.Stop()
        }
    }
    
    "full" {
        Write-Log "üîÑ D√©marrage complet avec tous les services..." "INFO"
        
        # D√©marrer les services backend
        Write-Log "D√©marrage des services backend..." "INFO"
        Set-Location $PSScriptRoot
        
        try {
            & ".\restart-services.ps1" -Services @("consciousness-engine", "api-gateway") -WaitForHealthy
            if ($LASTEXITCODE -ne 0) {
                Write-Log "‚ö†Ô∏è Certains services n'ont pas d√©marr√© correctement" "WARN"
            }
        } catch {
            Write-Log "‚ö†Ô∏è Erreur lors du d√©marrage des services: $_" "WARN"
        }
        
        # Attendre un peu
        Start-Sleep -Seconds 3
        
        # D√©marrer l'interface
        Set-Location $webUiPath
        Write-Log "D√©marrage de l'interface web..." "INFO"
        Write-Log "   Local:   http://127.0.0.1:$Port" "INFO"
        Write-Log "   Acc√®s:   http://127.0.0.1:$Port/#/login" "INFO"
        Write-Log "" "INFO"
        Write-Log "üîÑ Syst√®me complet avec red√©marrage automatique actif" "SUCCESS"
        Write-Log "" "INFO"
        Write-Log "Appuyez sur Ctrl+C pour arr√™ter" "INFO"
        
        npm start
    }
    
    default {
        Write-Log "‚ùå Mode non reconnu: $Mode" "ERROR"
        Write-Log "Modes disponibles: dev, static, full" "INFO"
        exit 1
    }
}

# Nettoyage √† la fin
$endTime = Get-Date
$duration = $endTime - $startTime
Write-Log "Dur√©e totale: $($duration.TotalSeconds) secondes" "INFO"
Write-Log "Arr√™t du syst√®me..." "INFO"

# Retourner au r√©pertoire original
Set-Location $PSScriptRoot
